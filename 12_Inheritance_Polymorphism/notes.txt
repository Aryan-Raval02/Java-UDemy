~> Generalisation Vs Specialisation

    Generelisation : Generalisation is the process of extracting shared characteristics from two or more classes and combining them into a generalized superclass. 
    
                Ex : SmartPhone -> iphone, samsung, vivo
                     Vehicle -> Car, Bike, Ship
                     Shape -> Triangle, Rectangle, Circle
                    
                    Common Parent

    Specialisation : Specialisation is the process of creating new subclasses from an existing class by adding specific features.
    
                Ex : iphone X -> iphone XS
                     Innova -> fortuner
                     Circle -> Cylinder
                     Guitar -> ElectricGuitar

                    Refine Child

~> Inheritance : Inheritance is the process of creating new subclasses from an existing class by adding specific features.

~> Constructor in Inhertance :
        when child class object is created then first executes parent class constructor after the execute child class constructor.
        Top to Bottom

    super keyword refer to parent class constructor.


~>  this :
            reference to current object and target inside class properties and methods.
            this keyword used to avoid name conflict.
            this keyword is used to access current object's properties and methods.

~>  Super :
            super keyword refer to parent class
            it used with constructor and properties also.

~> What is Method Overriding ?
            Redifing a method of super class in sub class.
            Signature is same only body is different.

            Ex :
            class Super{
                public void display(){
                    sop("Hello");
                }
            }
            class Sub extends Super{
                public void display(){
                    sop("Hello, World!");
                }
            }

            Notes : Method will call depending on objects not reference.

~> Why Method Overriding ?
            Overriding is achieve in inheritance.

~> Dynamic Method Dispatch (Runtime Polymorphism) :

            Dynamic Method Dispatch is the mechanism by which a call to an overridden method is resolved at runtime, based on the actual object being referenced â€” not the reference type.
            Method will call depending on objects not reference.

            Ex :
            class Super{
                public void display(){
                    sop("Hello");
                }
                public void m1(){
                    sop("M1");
                }
            }
            class Sub extends Super{
                public void m2(){
                    sop("M2");
                }
                public void display(){
                    sop("Hello, World!");
                }
            }

            (reference)   (Object)
            Super su = new Sub();
            su.display(); //Output : Hello, World!
            su.m1();
            su.m2(); // it throws errror because reference type does not know about m2().

~> Rules :
            The method that gets executed depends on the object (instance), not the reference type.
            Method signature must be same
            Access modifier must not be more restrictive.
            static and final method cannot be overridden

~> Overloading(Compile time polymorphism) Vs Overriding(Runtime Polymorphism) :