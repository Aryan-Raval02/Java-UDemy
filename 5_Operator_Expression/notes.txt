[] Operators :
    1) Arithmetic Operators : * / % + -


    2) Bitwise Operators :
    int x=10,y=6,z;
    x->00001010
    y->00000110
  x&y->00000010 = 2
  x|y->00001110 = 14
  x^y->00001100 = 12

    x->00001010 = 2
 x<<1->00010100 = 20 n*2**k = 10*2*1 = 20
 x>>1->00000101 = 5  n/2**k = 10/2 = 5


~> Left Shift :
    Suppose we have a=5 //00...0101
    int result = a << 1;
    Then all bits move one position to left.
    original : 00...0101 // 5
    output   : 00...1010 // 10

    Left shift gives output of number using this formula n*(2**k)

    important : 
    Bits shifted out on left are discarded.
    new bits on the right are always filled with 0.


~> Right Shift :
    Preserve The Sign for negative number.

  for Positive Number :
    Suppose we  have a=8; //00...1000
    int result = a >> 1;
    Then all bits move one position to right but signed bit not change.
    original : 00...1000 // 8
    output   : 00...0100 // 4
  
  for Negative Number :       
    Suppose we have a= -8; // 11...1000
    int result = a >> 1;
    Then all bits move one position to right but signed bit not change.
    original : 11...1000 // -8
    output   : 11...1100 // -4

    Right shift gives output of number using this formula n/(2**k)


~> Unsigned Right Shift :
    Fills 0 on the left side.
    Does not preserve the sign.

    Suppose we have a= -8; // 11...1000
    int result = a >> 1;
    Then all bits move one position to right but signed bit change.
    original : 11...1000 // -8
    output   : 01...1100 // 2147483644

    Right shift gives output of number using this formula n/(2**k)


~> Swapping :

a = 3 
b = 5

a=a^b; // step 1
b=a^b; // step 2
a=a^b; // step 3

step 1 :
    a   = 0011
    b   = 0101
    a^b = 0110
    then a becomes 6

step 2 :
    a   = 0110
    b   = 0101
    a^b = 0011
    then b becomes 3

step 3 :
    a   = 0110
    b   = 0011
    a^b = 0101
    then a becomes 5


~> Merging : Merge two value of integer into one variable through Bits. 

~> Masking : Unmerge value to get number through bits.


~> Widening  : convert smaller data type value or variable to bigger data type is called widening, implicit, Upward Casting.

~> Narrowing : convert Bigger data type value or variable to Smaller data type is called Narrowing, Explicit, Downward Casting.


                              Widening
                     ----------------------------->

    byte   -->    short / char   -->   int   -->   long   -->   float   -->   double 

                     <-----------------------------
                              Narrowing